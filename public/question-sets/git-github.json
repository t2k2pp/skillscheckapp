{
  "id": "git-github",
  "title": "Git/GitHub スキルチェッカー",
  "description": "Git/GitHubの基礎から上級まで、実務で必要なバージョン管理スキルを測定します。基本コマンドからチーム開発のベストプラクティスまで幅広くカバーします。",
  "version": "1.0.0",
  "author": "Git Learning Team",
  "categories": ["基礎", "中級", "上級"],
  "totalQuestions": 75,
  "estimatedTime": "60-75分",
  "coverImage": "git-logo.png",
  "color": "#F05032",
  "questions": [
    {
      "id": 1,
      "level": "beginner",
      "text": "Gitとは何ですか？",
      "options": ["分散型バージョン管理システム", "集中型バージョン管理システム", "プログラミング言語", "テキストエディタ"],
      "correctAnswerIndex": 0,
      "explanation": "Gitは分散型バージョン管理システムです。各開発者のローカル環境に完全なリポジトリのコピーを持ち、中央サーバーに依存しないで作業できます。"
    },
    {
      "id": 2,
      "level": "beginner",
      "text": "新しいGitリポジトリを初期化するコマンドはどれですか？",
      "options": ["git init", "git start", "git create", "git new"],
      "correctAnswerIndex": 0,
      "explanation": "`git init`コマンドは、現在のディレクトリを新しいGitリポジトリとして初期化します。.gitディレクトリが作成され、バージョン管理が開始されます。"
    },
    {
      "id": 3,
      "level": "beginner",
      "text": "ファイルをステージングエリアに追加するコマンドはどれですか？",
      "options": ["git add", "git stage", "git include", "git prepare"],
      "correctAnswerIndex": 0,
      "explanation": "`git add`コマンドは、ファイルをステージングエリア（インデックス）に追加します。次のコミットに含める変更を準備する役割があります。"
    },
    {
      "id": 4,
      "level": "beginner",
      "text": "ワーキングディレクトリの状態を確認するコマンドはどれですか？",
      "options": ["git status", "git state", "git check", "git info"],
      "correctAnswerIndex": 0,
      "explanation": "`git status`コマンドは、ワーキングディレクトリとステージングエリアの状態を表示します。変更されたファイル、ステージされたファイル、未追跡のファイルなどを確認できます。"
    },
    {
      "id": 5,
      "level": "beginner",
      "text": "ステージされた変更をリポジトリに記録するコマンドはどれですか？",
      "options": ["git commit", "git save", "git record", "git submit"],
      "correctAnswerIndex": 0,
      "explanation": "`git commit`コマンドは、ステージングエリアの変更を永続的にリポジトリに記録します。コミットメッセージと共に変更内容がスナップショットとして保存されます。"
    },
    {
      "id": 6,
      "level": "beginner",
      "text": "コミット履歴を表示するコマンドはどれですか？",
      "options": ["git log", "git history", "git list", "git show"],
      "correctAnswerIndex": 0,
      "explanation": "`git log`コマンドは、現在のブランチのコミット履歴を時系列順（新しいものから古いものへ）に表示します。コミットハッシュ、作成者、日時、メッセージを確認できます。"
    },
    {
      "id": 7,
      "level": "beginner",
      "text": "リモートリポジトリを複製するコマンドはどれですか？",
      "options": ["git clone", "git copy", "git download", "git fetch"],
      "correctAnswerIndex": 0,
      "explanation": "`git clone`コマンドは、リモートリポジトリを完全にローカル環境に複製します。履歴、ブランチ、タグなどすべての情報がコピーされます。"
    },
    {
      "id": 8,
      "level": "beginner",
      "text": "すべてのファイルをステージングエリアに追加するコマンドはどれですか？",
      "options": ["git add .", "git add *", "git add all", "git add --everything"],
      "correctAnswerIndex": 0,
      "explanation": "`git add .`は、現在のディレクトリ以下のすべての変更されたファイルと新しいファイルをステージングエリアに追加します。"
    },
    {
      "id": 9,
      "level": "beginner",
      "text": "コミットメッセージを含めて一行でコミットするオプションはどれですか？",
      "options": ["git commit -m", "git commit --message", "git commit -msg", "git commit --comment"],
      "correctAnswerIndex": 0,
      "explanation": "`git commit -m \"メッセージ\"`は、エディタを開かずにコマンドライン上で直接コミットメッセージを指定してコミットできます。"
    },
    {
      "id": 10,
      "level": "beginner",
      "text": "リモートリポジトリのデフォルト名は何ですか？",
      "options": ["origin", "master", "remote", "upstream"],
      "correctAnswerIndex": 0,
      "explanation": "リモートリポジトリのデフォルト名は「origin」です。`git clone`でリポジトリを複製した際、自動的にoriginという名前でリモートリポジトリが登録されます。"
    },
    {
      "id": 11,
      "level": "beginner",
      "text": "ローカルの変更をリモートリポジトリに送信するコマンドはどれですか？",
      "options": ["git push", "git send", "git upload", "git sync"],
      "correctAnswerIndex": 0,
      "explanation": "`git push`コマンドは、ローカルリポジトリの変更をリモートリポジトリに送信（アップロード）します。"
    },
    {
      "id": 12,
      "level": "beginner",
      "text": "リモートリポジトリの変更をローカルに取得するコマンドはどれですか？",
      "options": ["git pull", "git get", "git download", "git sync"],
      "correctAnswerIndex": 0,
      "explanation": "`git pull`コマンドは、リモートリポジトリの最新の変更をローカルリポジトリに取得し、現在のブランチにマージします。"
    },
    {
      "id": 13,
      "level": "beginner",
      "text": "Gitで無視するファイルを指定するファイル名は何ですか？",
      "options": [".gitignore", ".ignore", ".gitexclude", ".exclude"],
      "correctAnswerIndex": 0,
      "explanation": ".gitignoreファイルは、Gitの追跡から除外するファイルやディレクトリのパターンを指定します。一時ファイルやビルド成果物などを無視するために使用されます。"
    },
    {
      "id": 14,
      "level": "beginner",
      "text": "ファイルの変更差分を表示するコマンドはどれですか？",
      "options": ["git diff", "git compare", "git changes", "git delta"],
      "correctAnswerIndex": 0,
      "explanation": "`git diff`コマンドは、ワーキングディレクトリの変更内容を表示します。どの行が追加・削除・変更されたかを確認できます。"
    },
    {
      "id": 15,
      "level": "beginner",
      "text": "GitHubとは何ですか？",
      "options": ["Gitリポジトリのホスティングサービス", "バージョン管理システム", "プログラミング言語", "コードエディタ"],
      "correctAnswerIndex": 0,
      "explanation": "GitHubは、Gitリポジトリをクラウド上でホスティングするサービスです。リモートリポジトリの提供に加え、プルリクエスト、イシュー管理、プロジェクト管理などの機能を提供します。"
    },
    {
      "id": 16,
      "level": "beginner",
      "text": "現在のブランチ名を表示する最も簡単な方法はどれですか？",
      "options": ["git branch", "git status", "git current", "git name"],
      "correctAnswerIndex": 0,
      "explanation": "`git branch`コマンドは、すべてのローカルブランチを表示し、現在のブランチの前に「*」が表示されます。`git status`でも現在のブランチを確認できます。"
    },
    {
      "id": 17,
      "level": "beginner",
      "text": "新しいブランチを作成するコマンドはどれですか？",
      "options": ["git branch <branch-name>", "git create <branch-name>", "git new <branch-name>", "git make <branch-name>"],
      "correctAnswerIndex": 0,
      "explanation": "`git branch <branch-name>`は新しいブランチを作成します。ただし、このコマンドではブランチの切り替えは行われません。"
    },
    {
      "id": 18,
      "level": "beginner",
      "text": "別のブランチに切り替えるコマンドはどれですか？",
      "options": ["git checkout", "git switch", "git change", "git move"],
      "correctAnswerIndex": 0,
      "explanation": "`git checkout <branch-name>`はブランチを切り替えます。Git 2.23以降では`git switch <branch-name>`も使用できます。"
    },
    {
      "id": 19,
      "level": "beginner",
      "text": "ファイルをステージングエリアから除外するコマンドはどれですか？",
      "options": ["git reset", "git unstage", "git remove", "git exclude"],
      "correctAnswerIndex": 0,
      "explanation": "`git reset <filename>`は、ステージングエリアからファイルを除外します。ファイルの変更内容は保持され、ワーキングディレクトリには残ります。"
    },
    {
      "id": 20,
      "level": "beginner",
      "text": "コミットに含める変更を部分的に選択する際に使用するオプションはどれですか？",
      "options": ["git add -p", "git add --partial", "git add --select", "git add --interactive"],
      "correctAnswerIndex": 0,
      "explanation": "`git add -p`（patch モード）は、変更を小さな単位（hunk）に分けて、コミットに含めるかどうかを個別に選択できます。"
    },
    {
      "id": 21,
      "level": "beginner",
      "text": "特定のコミットの詳細を表示するコマンドはどれですか？",
      "options": ["git show", "git view", "git display", "git detail"],
      "correctAnswerIndex": 0,
      "explanation": "`git show <commit-hash>`は、指定したコミットの詳細情報（変更内容、作成者、日時など）を表示します。"
    },
    {
      "id": 22,
      "level": "beginner",
      "text": "直前のコミットを修正するオプションはどれですか？",
      "options": ["git commit --amend", "git commit --fix", "git commit --modify", "git commit --update"],
      "correctAnswerIndex": 0,
      "explanation": "`git commit --amend`は、直前のコミットを修正します。新しい変更を追加したり、コミットメッセージを変更したりできます。"
    },
    {
      "id": 23,
      "level": "beginner",
      "text": "リモートリポジトリの情報を表示するコマンドはどれですか？",
      "options": ["git remote -v", "git remote --info", "git remote --show", "git remote --list"],
      "correctAnswerIndex": 0,
      "explanation": "`git remote -v`は、設定されているリモートリポジトリの名前とURLを表示します。-vは--verboseの省略形です。"
    },
    {
      "id": 24,
      "level": "beginner",
      "text": "ワーキングディレクトリの変更を一時的に保存するコマンドはどれですか？",
      "options": ["git stash", "git save", "git temp", "git backup"],
      "correctAnswerIndex": 0,
      "explanation": "`git stash`は、ワーキングディレクトリの変更を一時的に保存し、クリーンな状態に戻します。後で`git stash pop`で復元できます。"
    },
    {
      "id": 25,
      "level": "beginner",
      "text": "タグを作成するコマンドはどれですか？",
      "options": ["git tag", "git mark", "git label", "git version"],
      "correctAnswerIndex": 0,
      "explanation": "`git tag <tag-name>`は、現在のコミットにタグを作成します。リリースバージョンの管理などに使用されます。"
    },
    {
      "id": 26,
      "level": "intermediate",
      "text": "新しいブランチを作成して同時に切り替えるコマンドはどれですか？",
      "options": ["git checkout -b", "git branch --switch", "git create --checkout", "git switch --new"],
      "correctAnswerIndex": 0,
      "explanation": "`git checkout -b <branch-name>`は、新しいブランチを作成して即座にそのブランチに切り替えます。Git 2.23以降では`git switch -c`も使用できます。"
    },
    {
      "id": 27,
      "level": "intermediate",
      "text": "ブランチをマージする際に使用する基本的なコマンドはどれですか？",
      "options": ["git merge", "git join", "git combine", "git integrate"],
      "correctAnswerIndex": 0,
      "explanation": "`git merge <branch-name>`は、指定したブランチを現在のブランチにマージします。複数の開発ラインを統合する際に使用されます。"
    },
    {
      "id": 28,
      "level": "intermediate",
      "text": "マージコミットを作成せずにブランチを統合する方法はどれですか？",
      "options": ["git merge --squash", "git merge --no-commit", "git merge --linear", "git merge --direct"],
      "correctAnswerIndex": 0,
      "explanation": "`git merge --squash`は、マージ対象ブランチのすべての変更を1つのコミットとしてまとめ、マージコミットを作成しません。"
    },
    {
      "id": 29,
      "level": "intermediate",
      "text": "ブランチの履歴を一直線にするためのコマンドはどれですか？",
      "options": ["git rebase", "git linearize", "git flatten", "git straighten"],
      "correctAnswerIndex": 0,
      "explanation": "`git rebase`は、ブランチのコミットを別のブランチの最新コミットの上に移動し、履歴を一直線にします。"
    },
    {
      "id": 30,
      "level": "intermediate",
      "text": "リモートブランチの情報を更新するコマンドはどれですか？",
      "options": ["git fetch", "git update", "git refresh", "git sync"],
      "correctAnswerIndex": 0,
      "explanation": "`git fetch`は、リモートリポジトリの最新情報をローカルに取得します。ローカルブランチは更新されず、リモート追跡ブランチのみが更新されます。"
    },
    {
      "id": 31,
      "level": "intermediate",
      "text": "マージコンフリクトが発生した際、どのファイルでコンフリクトが起きているかを確認するコマンドはどれですか？",
      "options": ["git status", "git conflicts", "git diff --conflicts", "git merge --status"],
      "correctAnswerIndex": 0,
      "explanation": "`git status`は、マージコンフリクトが発生している際に、どのファイルが「both modified」状態にあるかを表示します。"
    },
    {
      "id": 32,
      "level": "intermediate",
      "text": "ブランチを削除するコマンドはどれですか？",
      "options": ["git branch -d", "git delete branch", "git remove branch", "git branch --delete"],
      "correctAnswerIndex": 0,
      "explanation": "`git branch -d <branch-name>`は、マージ済みのブランチを安全に削除します。未マージのブランチを強制削除する場合は`-D`を使用します。"
    },
    {
      "id": 33,
      "level": "intermediate",
      "text": "特定のコミットの変更を現在のブランチに適用するコマンドはどれですか？",
      "options": ["git cherry-pick", "git apply", "git copy-commit", "git pick"],
      "correctAnswerIndex": 0,
      "explanation": "`git cherry-pick <commit-hash>`は、指定したコミットの変更のみを現在のブランチに適用します。他のブランチから特定の変更だけを取り込む際に使用されます。"
    },
    {
      "id": 34,
      "level": "intermediate",
      "text": "プルリクエスト（Pull Request）とは何ですか？",
      "options": ["ブランチのマージを提案・レビューするためのGitHub機能", "リモートリポジトリから変更を取得するコマンド", "ブランチを作成する際の申請", "コミットを取り消す機能"],
      "correctAnswerIndex": 0,
      "explanation": "プルリクエストは、ブランチの変更をメインブランチにマージすることを提案し、コードレビューやディスカッションを行うためのGitHubの機能です。"
    },
    {
      "id": 35,
      "level": "intermediate",
      "text": "リモートブランチを追跡するローカルブランチを作成するコマンドはどれですか？",
      "options": ["git checkout -b <local-branch> origin/<remote-branch>", "git branch --track origin/<remote-branch>", "git pull origin <remote-branch>", "git clone -b <remote-branch>"],
      "correctAnswerIndex": 0,
      "explanation": "`git checkout -b <local-branch> origin/<remote-branch>`は、リモートブランチを基にローカルブランチを作成し、追跡設定も行います。"
    },
    {
      "id": 36,
      "level": "intermediate",
      "text": "複数のコミットを1つにまとめるGitの機能は何ですか？",
      "options": ["スカッシュ（Squash）", "マージ（Merge）", "リベース（Rebase）", "チェリーピック（Cherry-pick）"],
      "correctAnswerIndex": 0,
      "explanation": "スカッシュは、複数のコミットを1つのコミットにまとめる機能です。`git rebase -i`やプルリクエストのマージオプションで使用できます。"
    },
    {
      "id": 37,
      "level": "intermediate",
      "text": "インタラクティブリベースを開始するコマンドはどれですか？",
      "options": ["git rebase -i", "git rebase --interactive", "git rebase --edit", "git rebase --modify"],
      "correctAnswerIndex": 0,
      "explanation": "`git rebase -i`は、インタラクティブリベースを開始し、コミットの編集、削除、並び替え、スカッシュなどを行えます。"
    },
    {
      "id": 38,
      "level": "intermediate",
      "text": "フォーク（Fork）とは何ですか？",
      "options": ["他人のリポジトリのコピーを自分のアカウントに作成すること", "ブランチを分岐させること", "リポジトリを複製すること", "プルリクエストを作成すること"],
      "correctAnswerIndex": 0,
      "explanation": "フォークは、GitHubで他人のリポジトリを自分のアカウントにコピーすることです。オープンソースプロジェクトへの貢献などに使用されます。"
    },
    {
      "id": 39,
      "level": "intermediate",
      "text": "上流（upstream）リポジトリとは何を指しますか？",
      "options": ["フォーク元のオリジナルリポジトリ", "最新のリモートリポジトリ", "メインブランチのリポジトリ", "最初にクローンしたリポジトリ"],
      "correctAnswerIndex": 0,
      "explanation": "上流（upstream）リポジトリは、フォークした際の元となったオリジナルのリポジトリを指します。最新の変更を同期するために設定されます。"
    },
    {
      "id": 40,
      "level": "intermediate",
      "text": "特定のファイルのコミット履歴を表示するコマンドはどれですか？",
      "options": ["git log <filename>", "git history <filename>", "git track <filename>", "git file-log <filename>"],
      "correctAnswerIndex": 0,
      "explanation": "`git log <filename>`は、指定したファイルに関連するコミット履歴のみを表示します。ファイルの変更経緯を追跡する際に有用です。"
    },
    {
      "id": 41,
      "level": "intermediate",
      "text": "コミットメッセージの推奨される形式はどれですか？",
      "options": ["1行目に概要、空行、詳細説明", "詳細な説明のみ", "日付とコミット者名から開始", "変更ファイル名の羅列"],
      "correctAnswerIndex": 0,
      "explanation": "一般的なコミットメッセージの形式は、1行目に50文字以内の概要、空行、その後に詳細説明を記述することが推奨されています。"
    },
    {
      "id": 42,
      "level": "intermediate",
      "text": "他の開発者の変更と競合を避けるための基本的な作業フローはどれですか？",
      "options": ["頻繁にpullしてからpushする", "常にmainブランチで作業する", "pushする前にfetchする", "毎回新しいリポジトリを作成する"],
      "correctAnswerIndex": 0,
      "explanation": "競合を避けるためには、作業開始前とpush前にリモートから最新の変更を取得（pull）し、ローカルで統合してからpushするのが基本です。"
    },
    {
      "id": 43,
      "level": "intermediate",
      "text": "コミット履歴を装飾付きで見やすく表示するオプションはどれですか？",
      "options": ["git log --oneline --graph --decorate", "git log --pretty", "git log --visual", "git log --format"],
      "correctAnswerIndex": 0,
      "explanation": "`git log --oneline --graph --decorate`は、コミット履歴を1行ずつ、ブランチの分岐をグラフで、タグやブランチ名を装飾付きで表示します。"
    },
    {
      "id": 44,
      "level": "intermediate",
      "text": "ファイルのある部分がいつ変更されたかを調べるコマンドはどれですか？",
      "options": ["git blame", "git who", "git author", "git history"],
      "correctAnswerIndex": 0,
      "explanation": "`git blame <filename>`は、ファイルの各行について、いつ、誰が、どのコミットで変更したかを表示します。"
    },
    {
      "id": 45,
      "level": "intermediate",
      "text": "マージとリベースの主な違いは何ですか？",
      "options": ["マージは履歴を保持、リベースは履歴を一直線にする", "マージは高速、リベースは低速", "マージは安全、リベースは危険", "マージは自動、リベースは手動"],
      "correctAnswerIndex": 0,
      "explanation": "マージはブランチの履歴をそのまま保持してマージコミットを作成しますが、リベースはコミットを移動して履歴を一直線にします。"
    },
    {
      "id": 46,
      "level": "intermediate",
      "text": "stashした変更を復元するコマンドはどれですか？",
      "options": ["git stash pop", "git stash restore", "git stash apply", "git stash get"],
      "correctAnswerIndex": 0,
      "explanation": "`git stash pop`は、最新のstashを復元し、同時にstash リストから削除します。`git stash apply`は復元しますがstashは残ります。"
    },
    {
      "id": 47,
      "level": "intermediate",
      "text": "特定のブランチのみをクローンするオプションはどれですか？",
      "options": ["git clone -b <branch>", "git clone --branch <branch>", "git clone --single <branch>", "git clone --only <branch>"],
      "correctAnswerIndex": 0,
      "explanation": "`git clone -b <branch-name> <url>`は、指定したブランチのみをチェックアウトした状態でクローンします。"
    },
    {
      "id": 48,
      "level": "intermediate",
      "text": "リモートブランチを削除するコマンドはどれですか？",
      "options": ["git push origin --delete <branch>", "git remote delete <branch>", "git branch -r -d <branch>", "git push --remove <branch>"],
      "correctAnswerIndex": 0,
      "explanation": "`git push origin --delete <branch-name>`は、リモートリポジトリの指定したブランチを削除します。"
    },
    {
      "id": 49,
      "level": "intermediate",
      "text": "サブモジュールとは何ですか？",
      "options": ["他のGitリポジトリを含む仕組み", "ブランチの一種", "コミットの分割機能", "マージの方法"],
      "correctAnswerIndex": 0,
      "explanation": "サブモジュールは、Gitリポジトリの中に他のGitリポジトリを含める仕組みです。外部ライブラリやサブプロジェクトの管理に使用されます。"
    },
    {
      "id": 50,
      "level": "intermediate",
      "text": "コンフリクト解決後に行うべきコマンドはどれですか？",
      "options": ["git add で変更をステージしてからgit commit", "git merge --continue", "git conflict --resolve", "git fix --complete"],
      "correctAnswerIndex": 0,
      "explanation": "コンフリクト解決後は、修正したファイルを`git add`でステージし、`git commit`でマージコミットを作成します。"
    },
    {
      "id": 51,
      "level": "advanced",
      "text": "過去のコミットを取り消す安全な方法はどれですか？",
      "options": ["git revert", "git reset --hard", "git delete", "git undo"],
      "correctAnswerIndex": 0,
      "explanation": "`git revert`は、指定したコミットの変更を打ち消す新しいコミットを作成します。履歴を改変せずに安全に変更を取り消せます。"
    },
    {
      "id": 52,
      "level": "advanced",
      "text": "共有されたブランチで避けるべきGitコマンドはどれですか？",
      "options": ["git reset --hard", "git merge", "git pull", "git push"],
      "correctAnswerIndex": 0,
      "explanation": "`git reset --hard`は履歴を改変するため、他の開発者と共有しているブランチで使用すると深刻な問題を引き起こします。"
    },
    {
      "id": 53,
      "level": "advanced",
      "text": "Gitフックとは何ですか？",
      "options": ["特定のGitイベント発生時に自動実行されるスクリプト", "ブランチを結合する機能", "コミットを修正する機能", "リモートリポジトリとの同期機能"],
      "correctAnswerIndex": 0,
      "explanation": "Gitフックは、コミット、プッシュ、マージなどのGitイベントが発生した際に自動的に実行されるスクリプトです。コードの品質チェックやデプロイ自動化に使用されます。"
    },
    {
      "id": 54,
      "level": "advanced",
      "text": "Git内部でコミットを識別するために使用されるハッシュアルゴリズムはどれですか？",
      "options": ["SHA-1", "MD5", "SHA-256", "CRC32"],
      "correctAnswerIndex": 0,
      "explanation": "GitはSHA-1ハッシュアルゴリズムを使用してコミット、ツリー、ブロブオブジェクトを識別します。各オブジェクトは一意の40文字の16進数ハッシュを持ちます。"
    },
    {
      "id": 55,
      "level": "advanced",
      "text": "大きなファイルを効率的に管理するGitの拡張機能はどれですか？",
      "options": ["Git LFS", "Git Big", "Git Large", "Git Huge"],
      "correctAnswerIndex": 0,
      "explanation": "Git LFS（Large File Storage）は、大きなファイルを効率的に管理するためのGit拡張機能です。バイナリファイルや大容量ファイルをポインタファイルとして管理します。"
    },
    {
      "id": 56,
      "level": "advanced",
      "text": "複数のコミットにまたがる変更を検索するコマンドはどれですか？",
      "options": ["git bisect", "git search", "git find", "git hunt"],
      "correctAnswerIndex": 0,
      "explanation": "`git bisect`は、バグが導入されたコミットを二分探索により効率的に特定します。良い状態と悪い状態を指定して探索を行います。"
    },
    {
      "id": 57,
      "level": "advanced",
      "text": "ワークツリーとは何ですか？",
      "options": ["同じリポジトリから複数のブランチを同時にチェックアウトする機能", "ブランチの履歴を表示する機能", "リモートリポジトリとの同期状態", "コミットの階層構造"],
      "correctAnswerIndex": 0,
      "explanation": "`git worktree`は、同じリポジトリから複数のブランチを異なるディレクトリで同時にチェックアウトできる機能です。"
    },
    {
      "id": 58,
      "level": "advanced",
      "text": "Gitリポジトリのメタデータが保存されるディレクトリはどれですか？",
      "options": [".git", ".gitdata", ".repository", ".version"],
      "correctAnswerIndex": 0,
      "explanation": ".gitディレクトリには、オブジェクト、リファレンス、設定、フック、インデックスなど、Gitリポジトリのすべてのメタデータが保存されます。"
    },
    {
      "id": 59,
      "level": "advanced",
      "text": "reflogとは何ですか？",
      "options": ["ローカルリポジトリでのリファレンスの変更履歴", "リモートリポジトリのログ", "エラーログ", "設定変更履歴"],
      "correctAnswerIndex": 0,
      "explanation": "reflogは、HEAD、ブランチ、tagなどのリファレンスの変更履歴を記録します。`git reflog`でコミット履歴から消えた変更も復元できます。"
    },
    {
      "id": 60,
      "level": "advanced",
      "text": "shallow cloneとは何ですか？",
      "options": ["履歴を制限してクローンすること", "ブランチを1つだけクローンすること", "ファイルサイズを制限すること", "特定のディレクトリのみクローンすること"],
      "correctAnswerIndex": 0,
      "explanation": "shallow cloneは`git clone --depth N`で履歴を指定した深さまでに制限してクローンします。大きなリポジトリを高速にクローンする際に使用されます。"
    },
    {
      "id": 61,
      "level": "advanced",
      "text": "コミットメッセージにGitHubの課題を自動でクローズする記述はどれですか？",
      "options": ["fixes #123", "closes #123", "resolves #123", "すべて正解"],
      "correctAnswerIndex": 3,
      "explanation": "GitHubでは「fixes」「closes」「resolves」などのキーワードの後に課題番号を記述すると、コミット時に自動的に課題がクローズされます。"
    },
    {
      "id": 62,
      "level": "advanced",
      "text": "Gitオブジェクトの種類で正しくないものはどれですか？",
      "options": ["commit", "tree", "blob", "branch"],
      "correctAnswerIndex": 3,
      "explanation": "Gitの基本オブジェクトは「commit」「tree」「blob」「tag」の4種類です。「branch」はリファレンスであり、オブジェクトではありません。"
    },
    {
      "id": 63,
      "level": "advanced",
      "text": "マージコミットの特徴として正しいものはどれですか？",
      "options": ["2つ以上の親コミットを持つ", "必ず1つの親コミットを持つ", "親コミットを持たない", "ファイル変更を含まない"],
      "correctAnswerIndex": 0,
      "explanation": "マージコミットは、2つ以上のブランチを統合する際に作成されるコミットで、複数の親コミットを持ちます。"
    },
    {
      "id": 64,
      "level": "advanced",
      "text": "fast-forward マージとは何ですか？",
      "options": ["マージコミットを作成せずに単純にポインタを移動する", "高速でマージ処理を行う", "自動的にコンフリクトを解決する", "リモートブランチを優先してマージする"],
      "correctAnswerIndex": 0,
      "explanation": "fast-forward マージは、マージ先のブランチがマージ元の直接の祖先である場合に、マージコミットを作成せずにポインタを移動するだけのマージです。"
    },
    {
      "id": 65,
      "level": "advanced",
      "text": "三方向マージ（3-way merge）で使用される3つの要素は何ですか？",
      "options": ["マージ先ブランチ、マージ元ブランチ、共通祖先", "現在のブランチ、リモートブランチ、メインブランチ", "ローカル、リモート、ステージング", "HEAD、インデックス、ワーキングツリー"],
      "correctAnswerIndex": 0,
      "explanation": "三方向マージは、マージ先ブランチ、マージ元ブランチ、それらの共通祖先の3つを比較して効率的にマージを行います。"
    },
    {
      "id": 66,
      "level": "advanced",
      "text": "git config のスコープで最も優先度が高いのはどれですか？",
      "options": ["local", "global", "system", "repository"],
      "correctAnswerIndex": 0,
      "explanation": "git configの優先度は、local（リポジトリ固有）> global（ユーザー固有）> system（システム全体）の順で、localが最も高い優先度を持ちます。"
    },
    {
      "id": 67,
      "level": "advanced",
      "text": "Gitのパッキング（packing）とは何ですか？",
      "options": ["複数のオブジェクトを圧縮して効率的に保存する仕組み", "ブランチをまとめる機能", "コミットを圧縮する機能", "リモートリポジトリとの同期機能"],
      "correctAnswerIndex": 0,
      "explanation": "Gitのパッキングは、多数のオブジェクトファイルをpackfileに圧縮して効率的に保存する仕組みです。`git gc`で実行されます。"
    },
    {
      "id": 68,
      "level": "advanced",
      "text": "デタッチドHEAD状態とは何ですか？",
      "options": ["特定のコミットを直接指している状態", "HEADが削除された状態", "ブランチが壊れた状態", "リモートとの接続が切れた状態"],
      "correctAnswerIndex": 0,
      "explanation": "デタッチドHEAD状態は、HEADがブランチではなく特定のコミットを直接指している状態です。過去のコミットをチェックアウトした際に発生します。"
    },
    {
      "id": 69,
      "level": "advanced",
      "text": "Gitフローワークフローで最も安定したブランチはどれですか？",
      "options": ["master/main", "develop", "feature", "release"],
      "correctAnswerIndex": 0,
      "explanation": "Gitフローワークフローでは、master（またはmain）ブランチが最も安定しており、リリース可能な状態のコードのみが含まれます。"
    },
    {
      "id": 70,
      "level": "advanced",
      "text": "GitHub Flowワークフローの特徴として正しいものはどれですか？",
      "options": ["mainブランチが常にデプロイ可能", "複数の長期ブランチを維持", "リリースブランチが必須", "hotfixブランチを使用"],
      "correctAnswerIndex": 0,
      "explanation": "GitHub Flowは、mainブランチが常にデプロイ可能な状態を維持し、フィーチャーブランチから直接mainにマージするシンプルなワークフローです。"
    },
    {
      "id": 71,
      "level": "advanced",
      "text": "コードレビューのベストプラクティスとして適切でないものはどれですか？",
      "options": ["大きな変更を一度にレビュー", "建設的なフィードバック", "早期のレビュー依頼", "コードスタイルの一貫性確認"],
      "correctAnswerIndex": 0,
      "explanation": "大きな変更を一度にレビューするのは効率的ではありません。小さな単位に分けてレビューすることで、より効果的なフィードバックが可能になります。"
    },
    {
      "id": 72,
      "level": "advanced",
      "text": "semantic versioningにおいて、MAJOR.MINOR.PATCHのうち、後方互換性を破る変更で増加するのはどれですか？",
      "options": ["MAJOR", "MINOR", "PATCH", "すべて"],
      "correctAnswerIndex": 0,
      "explanation": "semantic versioningでは、後方互換性を破る変更がある場合はMAJORバージョンを上げます。MINORは後方互換性のある機能追加、PATCHはバグ修正です。"
    },
    {
      "id": 73,
      "level": "advanced",
      "text": "Gitエイリアスを設定するコマンドの例として正しいものはどれですか？",
      "options": ["git config --global alias.st status", "git alias st=status", "git set-alias st status", "git config alias st=status"],
      "correctAnswerIndex": 0,
      "explanation": "`git config --global alias.st status`は、`git st`で`git status`を実行できるエイリアスを設定します。"
    },
    {
      "id": 74,
      "level": "advanced",
      "text": "プロジェクトで.gitkeepファイルを使用する理由は何ですか？",
      "options": ["空のディレクトリをGitで追跡するため", "重要なファイルを保護するため", "設定ファイルを保存するため", "Gitの動作を制御するため"],
      "correctAnswerIndex": 0,
      "explanation": "Gitは空のディレクトリを追跡しないため、.gitkeepファイル（慣例的な名前）を配置して空のディレクトリをリポジトリに含める手法が使われます。"
    },
    {
      "id": 75,
      "level": "advanced",
      "text": "Gitリポジトリの整合性をチェックするコマンドはどれですか？",
      "options": ["git fsck", "git check", "git verify", "git validate"],
      "correctAnswerIndex": 0,
      "explanation": "`git fsck`（file system check）は、Gitオブジェクトデータベースの整合性をチェックし、破損や不整合を検出します。"
    }
  ]
}